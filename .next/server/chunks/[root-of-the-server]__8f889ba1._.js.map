{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/ai-assistant/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { prompt, context } = await request.json()\n\n    if (!prompt || typeof prompt !== 'string') {\n      return NextResponse.json(\n        { error: 'Prompt is required and must be a string' },\n        { status: 400 }\n      )\n    }\n\n    const apiKey = process.env.OPENROUTER_API_KEY\n    if (!apiKey) {\n      return NextResponse.json(\n        { error: 'API key not configured' },\n        { status: 500 }\n      )\n    }\n\n    const messages = [\n      {\n        role: 'system',\n        content: 'You are an expert software developer and coding assistant. Provide clear, concise, and practical code solutions. When generating code, include comments explaining key parts. Focus on best practices, security, and maintainability.'\n      },\n      {\n        role: 'user',\n        content: context ? `Context: ${context}\\n\\nPrompt: ${prompt}` : prompt\n      }\n    ]\n\n    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json',\n        'HTTP-Referer': process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:8000',\n        'X-Title': 'AI Development Platform'\n      },\n      body: JSON.stringify({\n        model: 'openai/gpt-4o',\n        messages,\n        temperature: 0.7,\n        max_tokens: 2000,\n        stream: false\n      })\n    })\n\n    if (!response.ok) {\n      const errorData = await response.text()\n      console.error('OpenRouter API error:', errorData)\n      return NextResponse.json(\n        { error: 'Failed to get AI response' },\n        { status: response.status }\n      )\n    }\n\n    const data = await response.json()\n    \n    if (!data.choices || !data.choices[0] || !data.choices[0].message) {\n      return NextResponse.json(\n        { error: 'Invalid response from AI service' },\n        { status: 500 }\n      )\n    }\n\n    return NextResponse.json({\n      response: data.choices[0].message.content,\n      usage: data.usage\n    })\n\n  } catch (error) {\n    console.error('AI Assistant API error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE9C,IAAI,CAAC,UAAU,OAAO,WAAW,UAAU;YACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0C,GACnD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,QAAQ,GAAG,CAAC,kBAAkB;QAC7C,IAAI,CAAC,QAAQ;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,WAAW;YACf;gBACE,MAAM;gBACN,SAAS;YACX;YACA;gBACE,MAAM;gBACN,SAAS,UAAU,CAAC,SAAS,EAAE,QAAQ,YAAY,EAAE,QAAQ,GAAG;YAClE;SACD;QAED,MAAM,WAAW,MAAM,MAAM,iDAAiD;YAC5E,QAAQ;YACR,SAAS;gBACP,iBAAiB,CAAC,OAAO,EAAE,QAAQ;gBACnC,gBAAgB;gBAChB,gBAAgB,QAAQ,GAAG,CAAC,oBAAoB,IAAI;gBACpD,WAAW;YACb;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,OAAO;gBACP;gBACA,aAAa;gBACb,YAAY;gBACZ,QAAQ;YACV;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,QAAQ,KAAK,CAAC,yBAAyB;YACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4B,GACrC;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAE9B;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,KAAK,OAAO,CAAC,EAAE,IAAI,CAAC,KAAK,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE;YACjE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmC,GAC5C;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,UAAU,KAAK,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO;YACzC,OAAO,KAAK,KAAK;QACnB;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}